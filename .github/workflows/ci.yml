name: CI

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      # Use a matrix to run and report on all checks separately
      fail-fast: false
      matrix:
        check: ["ruff check", "ruff format", "mypy", "generate-data"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: "pip"

    - name: Install lint tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install '.[lint]'

    - name: ${{ matrix.check }}
      if: ${{ matrix.check != 'generate-data' }}
      run: python -m ${{ matrix.check }} .

    - name: Check generated data
      if: ${{ matrix.check == 'generate-data' }}
      # Verify the repo _data.py matches what would be generated
      run: |
        python tools/generate-data.py
        git diff --exit-code src/uts46/_data.py || {
          echo "::error file=src/uts46/_data.py::" \
            "generated _data.py is out of sync with generate-data script."
          exit 1
        }


  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Need history for hatch-vcs to calculate version
        fetch-depth: 0

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: "pip"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Build distribution
      run: |
        python -m build

    - name: Check metadata
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13", "3.14"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
        cache: "pip"

    - name: Get Python info
      id: setup
      run: |
        python -m pip install --upgrade pip
        python --version
        python .github/utils/get-python-info.py

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Install distribution and test dependencies
      run: |
        wheels=(./dist/*.whl)
        case ${#wheels[@]} in
          1)
            echo "Installing from ${wheels[0]}"
            python -m pip install "${wheels[0]}[test]"
            ;;
          0)
            echo "Error: No .whl files found in ./dist"
            exit 1
            ;;
          *)
            echo "Error: Multiple .whl files found in ./dist:"
            for file in "${wheels[@]}"; do
              echo "  $file"
            done
            exit 1
            ;;
        esac

    - name: Run tests
      # Ignore failures in pre-beta Python builds
      continue-on-error: ${{ steps.setup.outputs.python-release-level == 'alpha' }}
      run: |
        python -m unittest

  publish:
    needs: [lint, build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/uts46
    permissions:
      # Required for PyPI trusted publishing
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  release:
    needs: [publish]
    runs-on: ubuntu-latest
    permissions:
      # Required for GitHub release
      contents: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Release to GitHub
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        if ! gh release create "$TAG_NAME" \
          --repo "$GITHUB_REPOSITORY" \
          --title "Release $TAG_NAME" \
          --generate-notes \
          ./dist/*
        then
          # Release likely already exists; just add the distribution
          gh release upload "$TAG_NAME" \
            --repo "$GITHUB_REPOSITORY" \
            --clobber \
            ./dist/*
        fi
